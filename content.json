[{"title":"vue-hackernews-2.0 code explain","date":"2017-05-14T00:55:00.000Z","path":"2017/05/14/vue-hackernews-2.0-code-explain/","text":"前言一直从事Android开发技术，出于对前端的兴趣，准备研究下Vue前端框架，顺便学习前端技术栈。 本文会写的很详尽，对涉及到的知识点，都会做一些解读，已熟悉的知识点请直接略过。 vue-hackernews项目，看似简单，实际涉及知识点及技术栈非常全面，对于初学者或者零知识储备者来说，直接阅读该项目，困难是很大的。这也是我写这个项目解读的初衷，希望通过阅读这样一个项目，来综合学习此项目涉及到的技术栈。 起步 HackerNews 是基于 HN 的官方 firebase API 、Vue 2.0 、vue-router 和 vuex 来构建的，使用服务器端渲染。项目源码地址:vue-hackernews-2.0 本项目包含开发模式及生产模式，我们先讲开发模式。 让我们从node环境下执行node命令开始。12# serve in dev mode, with hot reload at localhost:8080$npm run dev 然后发生了什么？我们来看一张图。 执行dev属性对应的脚本：node server即node server.js Tips:package.json解读 执行npm run dev后，先去package.json中的scripts字段对应的对象，找到dev属性，并执行dev属性对应的脚本：node server即node server.js即执行server.jsserver.js做了什么？一句话概括，最终监听本机8080端口，等待客户端请求。然后就可以访问http://localhost:8080 ，看看效果了。 接下来我们从server.js开始一步一步，梳理整个项目的流程。 先上一张整个基于代码文件执行流的流程框图，顺着文件执行流的藤，先摸摸瓜，看不太明白没关系，随着深入的了解每个文件的功能，回过头看就更清晰了。 server.js找到真正驱动这个js运作的核心代码段：12345678app.get('*', isProd ? render : (req, res) =&gt; &#123; readyPromise.then(() =&gt; render(req, res))&#125;)const port = process.env.PORT || 8080app.listen(port, () =&gt; &#123; console.log(`server started at localhost:$&#123;port&#125;`)&#125;) 当敲下npm run dev后，server.js执行完，上面的代码启动一个服务并监听从 8080 端口进入的所有连接请求。 （注意：由于在此段代码前，express实例装载了一些路由中间件，那么这些中间件会优先处理，然后才会传递给此路由处理。其中有几个中间件也对路由请求做了处理，包括一些静态资源的处理。后面涉及到相关资源请求时会详细讲解） Tip express.use(&apos;/&apos;) 只匹配 host+&apos;/&apos;这个路径 express.use(&apos;/*&apos;) &apos;*&apos; 代表任何, 匹配&apos;/&apos;以及&apos;/&apos;后面加任何的路径 当一个路径有多个匹配规则时，使用app.use，否则使用相应的app.method(get、post) app.METHOD(PATH, HANDLER) 此时在浏览器访问localhost:8080请求经由express路由接收后，执行处理逻辑:readyPromise.then(() =&gt; render(req, res))我们可以看到，这里使用了es6的新特性，Promise。生产环境下，readyPromise的定义：调用了./build/setup-dev-server的默认方法 12345// In development: setup the dev server with watch and hot-reload,// and create a new renderer on bundle / index template update.readyPromise = require('./build/setup-dev-server')(app, (bundle, options) =&gt; &#123; renderer = createRenderer(bundle, options)&#125;)","comments":true,"tags":[{"name":"vue","slug":"vue","permalink":"http://wangfuda.github.io/tags/vue/"},{"name":"Vuex","slug":"Vuex","permalink":"http://wangfuda.github.io/tags/Vuex/"},{"name":"vue-router","slug":"vue-router","permalink":"http://wangfuda.github.io/tags/vue-router/"},{"name":"ssr","slug":"ssr","permalink":"http://wangfuda.github.io/tags/ssr/"},{"name":"webpack","slug":"webpack","permalink":"http://wangfuda.github.io/tags/webpack/"}]},{"title":"vue-hackernews-2.0 code detail","date":"2017-05-12T16:00:00.000Z","path":"2017/05/13/vue-hackernews-2.0-code-detail/","text":"前言本文按章节分解了vue-hackernews-2.0开源项目中的一些知识点的细节，作为对项目源码解读的细节原理解读补充。 1.","comments":true,"tags":[{"name":"vue","slug":"vue","permalink":"http://wangfuda.github.io/tags/vue/"},{"name":"Vuex","slug":"Vuex","permalink":"http://wangfuda.github.io/tags/Vuex/"},{"name":"vue-router","slug":"vue-router","permalink":"http://wangfuda.github.io/tags/vue-router/"},{"name":"ssr","slug":"ssr","permalink":"http://wangfuda.github.io/tags/ssr/"},{"name":"webpack","slug":"webpack","permalink":"http://wangfuda.github.io/tags/webpack/"}]},{"title":"hello world ii","date":"2014-02-12T00:55:00.000Z","path":"2014/02/12/hello-world5/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","comments":true,"tags":[{"name":"js","slug":"js","permalink":"http://wangfuda.github.io/tags/js/"},{"name":"html5","slug":"html5","permalink":"http://wangfuda.github.io/tags/html5/"}]},{"title":"hello world i","date":"2014-02-11T00:55:00.000Z","path":"2014/02/11/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","comments":true,"tags":[{"name":"js","slug":"js","permalink":"http://wangfuda.github.io/tags/js/"},{"name":"html5","slug":"html5","permalink":"http://wangfuda.github.io/tags/html5/"}]}]