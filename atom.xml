<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>osan&#39;s blog</title>
  <subtitle>幸福右边，荒无人烟</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wangfuda.github.io/"/>
  <updated>2017-05-13T12:52:38.605Z</updated>
  <id>http://wangfuda.github.io/</id>
  
  <author>
    <name>osan</name>
    <email>o.san@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue-hackernews-2.0 源码解读</title>
    <link href="http://wangfuda.github.io/2017/05/14/vue-hackernews-2.0-code-explain/"/>
    <id>http://wangfuda.github.io/2017/05/14/vue-hackernews-2.0-code-explain/</id>
    <published>2017-05-14T00:55:00.000Z</published>
    <updated>2017-05-13T12:52:38.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文将对Vue的官方开源项目<code>vue-hackernews-2.0</code>进行一次全面解读，包括项目中涉及到的前端技术栈。</p>
<p>vue-hackernews项目，实际涉及知识点及技术栈非常全面，对于初学者来说，直接阅读该项目，极具挑战。这也是我写这个项目解读的初衷。</p>
<h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><blockquote>
<p><a href="https://github.com/vuejs/vue-hackernews-2.0" target="_blank" rel="external">HackerNews</a>是基于 HN 的官方 firebase API 、Vue 2.0 、vue-router 和 vuex 来构建的，使用服务器端渲染。</p>
</blockquote>
<a id="more"></a>
<h2 id="项目概览"><a href="#项目概览" class="headerlink" title="项目概览"></a>项目概览</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="string">│</span>  <span class="string">manifest.json</span>				<span class="comment"># progressive web apps配置文件</span></div><div class="line"><span class="string">│</span>  <span class="string">package.json</span>					<span class="comment"># 项目配置文件</span></div><div class="line"><span class="string">│</span>  <span class="string">server.js</span>					<span class="comment"># 服务端渲染</span></div><div class="line"><span class="string">│</span>  </div><div class="line"><span class="string">├─public</span>                                    	<span class="comment"># 静态资源</span></div><div class="line"><span class="string">│</span>      <span class="string">logo-120.png</span></div><div class="line"><span class="string">│</span>      <span class="string">logo-144.png</span></div><div class="line"><span class="string">│</span>      <span class="string">logo-152.png</span></div><div class="line"><span class="string">│</span>      <span class="string">logo-192.png</span></div><div class="line"><span class="string">│</span>      <span class="string">logo-384.png</span></div><div class="line"><span class="string">│</span>      <span class="string">logo-48.png</span></div><div class="line"><span class="string">│</span>      </div><div class="line"><span class="string">└─src</span></div><div class="line">    <span class="string">│</span>  <span class="string">app.js</span>					<span class="comment"># 整合 router,filters,vuex 的入口文件</span></div><div class="line">    <span class="string">│</span>  <span class="string">App.vue</span>					<span class="comment"># 根 vue 组件</span></div><div class="line">    <span class="string">│</span>  <span class="string">entry-client.js</span>				<span class="comment"># client 的入口文件</span></div><div class="line">    <span class="string">│</span>  <span class="string">entry-server.js</span>				<span class="comment"># server 的入口文件</span></div><div class="line">    <span class="string">│</span>  <span class="string">index.template.html</span>			<span class="comment"># html 模板</span></div><div class="line">    <span class="string">│</span>  </div><div class="line">    <span class="string">├─api</span></div><div class="line">    <span class="string">│</span>      <span class="string">create-api-client.js</span>			<span class="comment"># Client数据源配置</span></div><div class="line">    <span class="string">│</span>      <span class="string">create-api-server.js</span>			<span class="comment"># server数据源配置</span></div><div class="line">    <span class="string">│</span>      <span class="string">index.js</span>				<span class="comment"># 数据请求API</span></div><div class="line">    <span class="string">│</span>      </div><div class="line">    <span class="string">├─components</span></div><div class="line">    <span class="string">│</span>      <span class="string">Comment.vue</span>				<span class="comment"># 评论组件</span></div><div class="line">    <span class="string">│</span>      <span class="string">Item.vue</span>				<span class="comment"># </span></div><div class="line">    <span class="string">│</span>      <span class="string">ProgressBar.vue</span>			<span class="comment"># 进度条组件</span></div><div class="line">    <span class="string">│</span>      <span class="string">Spinner.vue</span>				<span class="comment"># 加载提示组件</span></div><div class="line">    <span class="string">│</span>     </div><div class="line">    <span class="string">├─router</span></div><div class="line">    <span class="string">│</span>      <span class="string">index.js</span>				<span class="comment"># router配置</span></div><div class="line">    <span class="string">│</span>      </div><div class="line">    <span class="string">├─store</span>					<span class="comment"># Vue store管理模块</span></div><div class="line">    <span class="string">│</span>      <span class="string">actions.js</span>				<span class="comment"># actions管理</span></div><div class="line">    <span class="string">│</span>      <span class="string">getters.js</span>				<span class="comment"># 属性接口</span></div><div class="line">    <span class="string">│</span>      <span class="string">index.js</span>				<span class="comment"># Vuex Store配置</span></div><div class="line">    <span class="string">│</span>      <span class="string">mutations.js</span>				<span class="comment"># mutations管理</span></div><div class="line">    <span class="string">│</span>      </div><div class="line">    <span class="string">├─util</span></div><div class="line">    <span class="string">│</span>      <span class="string">filters.js</span>				<span class="comment"># 过滤器</span></div><div class="line">    <span class="string">│</span>      <span class="string">title.js</span>				<span class="comment"># 工具类</span></div><div class="line">    <span class="string">│</span>      </div><div class="line">    <span class="string">└─views</span></div><div class="line">            <span class="string">CreateListView.js</span>			<span class="comment"># 动态生成列表界面的工厂方法</span></div><div class="line">            <span class="string">ItemList.vue</span>			<span class="comment"># List界面组件</span></div><div class="line">            <span class="string">ItemView.vue</span>			<span class="comment"># 单List项组件</span></div><div class="line">            <span class="string">UserView.vue</span>			<span class="comment"># 用户界面组件</span></div></pre></td></tr></table></figure>
<h2 id="服务端渲染流程"><a href="#服务端渲染流程" class="headerlink" title="服务端渲染流程"></a>服务端渲染流程</h2><p>本项目包含开发模式及生产模式，我们先学习开发模式。</p>
<p>让我们从node环境下执行node命令开始。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># serve in dev mode, with hot reload at localhost:8080</span></div><div class="line"><span class="variable">$npm</span> run dev</div></pre></td></tr></table></figure></p>
<p>然后发生了什么？我们来看一张图。<br><img src="/assets/postImg/rundev.png" alt="rundev"></p>
<blockquote>
<p>Tips:<a href="https://wangfuda.github.io/2017/05/13/vue-hackernews-2.0-code-detail/">package.json解读</a></p>
</blockquote>
<p>上述执行dev属性对应的脚本：<code>node server</code>即<code>node server.js</code>，即执行server.js</p>
<p>然后就可以访问<a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a> ，看看效果了。<br><img src="/assets/postImg/open_by_pc_chrome.png" alt="open_by_pc_chrome"></p>
<p>接下来我们从server.js开始一步一步，梳理整个项目的流程。</p>
<p>找到真正驱动这个server.js运作的核心代码段：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">app.get(<span class="string">'*'</span>, isProd ? render : <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</div><div class="line">  readyPromise.then(<span class="function"><span class="params">()</span> =&gt;</span> render(req, res))</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">const</span> port = process.env.PORT || <span class="number">8080</span></div><div class="line">app.listen(port, () =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`server started at localhost:<span class="subst">$&#123;port&#125;</span>`</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>当敲下npm run dev后，server.js执行完，上面的代码启动一个服务并监听从 8080 端口进入的所有连接请求。</p>
<blockquote>
<p>Tips:此项目全面使用<a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ES6语法</a>，包括箭头函数，解构赋值，Promise等特性。</p>
</blockquote>
<p>此时在浏览器访问localhost:8080<br>请求经由<a href="http://www.expressjs.com.cn/" target="_blank" rel="external">express</a>路由接收后，执行处理逻辑:<code>readyPromise.then(() =&gt; render(req, res))</code><br>这里使用了es6的新特性，<a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="external">Promise</a>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// In development: setup the dev server with watch and hot-reload,</span></div><div class="line"><span class="comment">// and create a new renderer on bundle / index template update.</span></div><div class="line">readyPromise = <span class="built_in">require</span>(<span class="string">'./build/setup-dev-server'</span>)(app, (bundle, options) =&gt; &#123;</div><div class="line">  renderer = createRenderer(bundle, options)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>看一张server.js的模块依赖关系图，只看项目自文件依赖即可（黄色）<br><img src="/assets/postImg/serverjs.png" alt="serverjs"></p>
<p>调用setup-dev-server.js 模块，根据上图中webpack config文件实现入口文件打包，热重载和热替换功能实现。并最终通过回调把生成在内存中的打包文件传回，然后创建一个渲染器。</p>
<blockquote>
<p>Tips<br>1.<a href="https://ssr.vuejs.org" target="_blank" rel="external">vue-server-renderer</a>(Vue服务端渲染，同时支持prefetch、prerender特性)<br>2.<a href="https://webpack.js.org/guides/development/#webpack-dev-server" target="_blank" rel="external">webpack-dev-server</a>(webpack-dev-middleware/webpack-hot-middleware)</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createRenderer</span> (<span class="params">bundle, options</span>) </span>&#123;</div><div class="line">  <span class="comment">// https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`createRenderer`</span>)</div><div class="line">  <span class="keyword">return</span> createBundleRenderer(bundle, <span class="built_in">Object</span>.assign(options, &#123;</div><div class="line">    template,</div><div class="line">   </div><div class="line">	···</div><div class="line"></div><div class="line">  &#125;))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建渲染器时重点两件事：<br>1.绑定渲染用的bundle，这个bundle是在setup-dev-server.js中打包生成的服务端入口文件<code>entry-server.js</code><br>当渲染器调用<code>renderer.renderToString</code>开始渲染时，会执行该入口文件的默认方法。<br>2.传入了一个html模板<code>index.template.html</code>，这个模板稍后在服务端渲染时就会动态添加预取数据到模板中。</p>
<blockquote>
<p>Tips:<a href="https://wangfuda.github.io/2017/05/13/vue-hackernews-2.0-code-detail/">index.template.html解读</a></p>
</blockquote>
<p>顺着readyPromise.then的调用链，接下来调用render方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">	</div><div class="line">···</div><div class="line"></div><div class="line">  renderer.renderToString(context, (err, html) =&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">      <span class="keyword">return</span> handleError(err)</div><div class="line">    &#125;</div><div class="line">    res.end(html)</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">`html:`</span>+html)</div><div class="line">    <span class="keyword">if</span> (cacheable) &#123;</div><div class="line">      microCache.set(req.url, html)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!isProd) &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">`whole request: <span class="subst">$&#123;<span class="built_in">Date</span>.now() - s&#125;</span>ms`</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>renderer.renderToString</code>方法内部会先调用入口模块<code>entry-server.js</code>的默认方法，我们看下<code>entry-server.js</code>主要做了什么</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// This exported function will be called by `bundleRenderer`.</span></div><div class="line"><span class="comment">// This is where we perform data-prefetching to determine the</span></div><div class="line"><span class="comment">// state of our application before actually rendering it.</span></div><div class="line"><span class="comment">// Since data fetching is async, this function is expected to</span></div><div class="line"><span class="comment">// return a Promise that resolves to the app instance.</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> context =&gt; &#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> s = isDev &amp;&amp; <span class="built_in">Date</span>.now()</div><div class="line">    <span class="keyword">const</span> &#123; app, router, store &#125; = createApp()</div><div class="line"></div><div class="line">    <span class="comment">// set router's location</span></div><div class="line">    <span class="comment">// 手动路由导航到请求的url，即'/'</span></div><div class="line">    router.push(context.url)</div><div class="line"></div><div class="line">    <span class="comment">// wait until router has resolved possible async hooks</span></div><div class="line">    router.onReady(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="comment">// 获取该url路由下的所有Component，这些组件定义在Vue Router中。 /src/router/index.js</span></div><div class="line">      <span class="keyword">const</span> matchedComponents = router.getMatchedComponents()</div><div class="line">      <span class="comment">// no matched routes</span></div><div class="line">      <span class="keyword">if</span> (!matchedComponents.length) &#123;</div><div class="line">        reject(&#123; <span class="attr">code</span>: <span class="number">404</span> &#125;)</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// Call fetchData hooks on components matched by the route.</span></div><div class="line">      <span class="comment">// A preFetch hook dispatches a store action and returns a Promise,</span></div><div class="line">      <span class="comment">// which is resolved when the action is complete and store state has been</span></div><div class="line">      <span class="comment">// updated.</span></div><div class="line">      <span class="comment">// 使用Promise.all执行匹配到的Component的asyncData方法，即预取数据</span></div><div class="line">      <span class="built_in">Promise</span>.all(matchedComponents.map(<span class="function"><span class="params">component</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">return</span> component.asyncData &amp;&amp; component.asyncData(&#123;</div><div class="line">          store,</div><div class="line">          <span class="attr">route</span>: router.currentRoute</div><div class="line">        &#125;)</div><div class="line">      &#125;)).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        isDev &amp;&amp; <span class="built_in">console</span>.log(<span class="string">`data pre-fetch: <span class="subst">$&#123;<span class="built_in">Date</span>.now() - s&#125;</span>ms`</span>)</div><div class="line">        <span class="comment">// After all preFetch hooks are resolved, our store is now</span></div><div class="line">        <span class="comment">// filled with the state needed to render the app.</span></div><div class="line">        <span class="comment">// Expose the state on the render context, and let the request handler</span></div><div class="line">        <span class="comment">// inline the state in the HTML response. This allows the client-side</span></div><div class="line">        <span class="comment">// store to pick-up the server-side state without having to duplicate</span></div><div class="line">        <span class="comment">// the initial data fetching on the client.</span></div><div class="line">        <span class="comment">// 把vuex的state设置到传入的context.initialState上</span></div><div class="line">        context.state = store.state</div><div class="line">        <span class="comment">// 返回state, router已经设置好的Vue实例app</span></div><div class="line">        resolve(app)</div><div class="line">      &#125;).catch(reject)</div><div class="line">    &#125;, reject)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>entry-server.js</code>的主要工作：<br>1.手动路由导航到请求的url，即’/‘<br>2.找到该路由的组件，并调用组件的asyncData方法来预取数据<br>3.同步vuex的state数据至传入的context.initialState上，以避免客户端首屏重新加载数据<br>4.返回Vue实例</p>
<blockquote>
<p>Tips:下一章节我们会详细介绍这部分内容实现 稍后见于：<code>服务端渲染时的数据预取流程</code></p>
</blockquote>
<p>还记得<code>index.template.html</code>被设置到<code>template</code>属性中吗？<br>此时Vue渲染器内部就会将Vue实例渲染进我们传入的这个html模板，那么Vue render内部是如何知道把Vue实例插入到模板的什么位置呢？<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--vue-ssr-outlet--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>就是这里，这个<code>&lt;!--vue-ssr-outlet--&gt;</code>Vue渲染器就是根据这个自动插入的，所以这个是markup是不能随便改动的。</p>
<p>接下来，Vue渲染器会回调callback方法，我们回到<code>server.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">	</div><div class="line">  ···</div><div class="line"></div><div class="line">  renderer.renderToString(context, (err, html) =&gt; &#123;</div><div class="line"></div><div class="line">    res.end(html)</div><div class="line"></div><div class="line">    ···</div><div class="line"></div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此时只需要将渲染好的<code>html</code>写入http响应体就结束了，浏览器客户端就可以看到页面了。</p>
<p>接下来我们看看服务端数据预取的实现</p>
<h2 id="服务端渲染时的数据预取流程"><a href="#服务端渲染时的数据预取流程" class="headerlink" title="服务端渲染时的数据预取流程"></a>服务端渲染时的数据预取流程</h2><p>上文提到，服务端渲染时，会手动将路由导航到请求地址即<code>&#39;/&#39;</code>下，然后调用该路由组件的asyncData方法来预取数据</p>
<p>那么我们看看路由配置</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// /src/router/index.js</span></div><div class="line"></div><div class="line">Vue.use(Router)</div><div class="line"></div><div class="line"><span class="comment">// route-level code splitting</span></div><div class="line"><span class="keyword">const</span> createListView = <span class="function"><span class="params">id</span> =&gt;</span> () =&gt; System.import(<span class="string">'../views/CreateListView'</span>).then(<span class="function"><span class="params">m</span> =&gt;</span> m.default(id))</div><div class="line"><span class="keyword">const</span> ItemView = <span class="function"><span class="params">()</span> =&gt;</span> System.import(<span class="string">'../views/ItemView.vue'</span>)</div><div class="line"><span class="keyword">const</span> UserView = <span class="function"><span class="params">()</span> =&gt;</span> System.import(<span class="string">'../views/UserView.vue'</span>)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createRouter</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Router(&#123;</div><div class="line">    <span class="attr">mode</span>: <span class="string">'history'</span>,</div><div class="line">    <span class="attr">scrollBehavior</span>: <span class="function"><span class="params">()</span> =&gt;</span> (&#123; <span class="attr">y</span>: <span class="number">0</span> &#125;),</div><div class="line">    <span class="attr">routes</span>: [</div><div class="line">      &#123; <span class="attr">path</span>: <span class="string">'/top/:page(\\d+)?'</span>, <span class="attr">component</span>: createListView(<span class="string">'top'</span>) &#125;,</div><div class="line">      &#123; <span class="attr">path</span>: <span class="string">'/new/:page(\\d+)?'</span>, <span class="attr">component</span>: createListView(<span class="string">'new'</span>) &#125;,</div><div class="line">      &#123; <span class="attr">path</span>: <span class="string">'/show/:page(\\d+)?'</span>, <span class="attr">component</span>: createListView(<span class="string">'show'</span>) &#125;,</div><div class="line">      &#123; <span class="attr">path</span>: <span class="string">'/ask/:page(\\d+)?'</span>, <span class="attr">component</span>: createListView(<span class="string">'ask'</span>) &#125;,</div><div class="line">      &#123; <span class="attr">path</span>: <span class="string">'/job/:page(\\d+)?'</span>, <span class="attr">component</span>: createListView(<span class="string">'job'</span>) &#125;,</div><div class="line">      &#123; <span class="attr">path</span>: <span class="string">'/item/:id(\\d+)'</span>, <span class="attr">component</span>: ItemView &#125;,</div><div class="line">      &#123; <span class="attr">path</span>: <span class="string">'/user/:id'</span>, <span class="attr">component</span>: UserView &#125;,</div><div class="line">      &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">redirect</span>: <span class="string">'/top'</span> &#125;</div><div class="line">    ]</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>地址<code>&#39;/&#39;</code>是做了redirect到<code>&#39;/top&#39;</code>,其实就是默认地址就是到top页面，在看第一条路由配置，<code>&#39;/top&#39;</code>路由对应的组件是<code>createListView(&#39;top&#39;)</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// /src/views/CreateListView.js</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">createListView</span> (<span class="params">type</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">`<span class="subst">$&#123;type&#125;</span>-stories-view`</span>,</div><div class="line"></div><div class="line">    asyncData (&#123; store &#125;) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`createListView asyncData`</span>)</div><div class="line">      <span class="keyword">return</span> store.dispatch(<span class="string">'FETCH_LIST_DATA'</span>, &#123; type &#125;)</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">title</span>: camelize(type),</div><div class="line"></div><div class="line">    render (h) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`createListView render`</span>)</div><div class="line">      <span class="keyword">return</span> h(ItemList, &#123; <span class="attr">props</span>: &#123; type &#125;&#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Tips: <a href="https://vuex.vuejs.org/zh-cn/intro.html" target="_blank" rel="external">Vuex状态管理</a><br>1.dispatch对应Action，commit对应mutation<br>2.Action 类似于 mutation，不同在于：Action是异步事件，mutation是同步事件。</p>
</blockquote>
<p>asyncData方法被调用，通过store.dispatch分发了一个数据预取的事件，接下来我们可以看到通过FireBase的API获取到Top分类的数据，然后又做了一系列的内部事件分发，保存数据状态到Vuex store，然后去获取Top页面的List子项数据，然后又处理并保存数据到store.</p>
<p>最后数据就都保存在store这里了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// /src/store/index.js</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createStore</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Vuex.Store(&#123;</div><div class="line">    <span class="attr">state</span>: &#123;</div><div class="line">      <span class="attr">activeType</span>: <span class="literal">null</span>,</div><div class="line">      <span class="attr">itemsPerPage</span>: <span class="number">20</span>,</div><div class="line">      <span class="attr">items</span>: &#123;<span class="comment">/* [id: number]: Item */</span>&#125;,</div><div class="line">      <span class="attr">users</span>: &#123;<span class="comment">/* [id: string]: User */</span>&#125;,</div><div class="line">      <span class="attr">lists</span>: &#123;</div><div class="line">        <span class="attr">top</span>: [<span class="comment">/* number */</span>],</div><div class="line">        <span class="attr">new</span>: [],</div><div class="line">        <span class="attr">show</span>: [],</div><div class="line">        <span class="attr">ask</span>: [],</div><div class="line">        <span class="attr">job</span>: []</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    actions,</div><div class="line">    mutations,</div><div class="line">    getters</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后将开始通过<a href="https://cn.vuejs.org/v2/guide/render-function.html#main" target="_blank" rel="external">Render 函数</a>创建HTML。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// /src/views/CreateListView.js</span></div><div class="line"></div><div class="line">render (h) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`createListView render`</span>)</div><div class="line">      <span class="keyword">return</span> h(ItemList, &#123; <span class="attr">props</span>: &#123; type &#125;&#125;)</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// /src/views/ItemList.vue</span></div><div class="line">···</div><div class="line"></div><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class="news-view"&gt;</div><div class="line">    &lt;div class="news-list-nav"&gt;</div><div class="line">      &lt;router-link v-if="page &gt; 1" :to="'/' + type + '/' + (page - 1)"&gt;&amp;lt; prev&lt;/router-link&gt;</div><div class="line">      &lt;a v-else class="disabled"&gt;&amp;lt; prev&lt;/a&gt;</div><div class="line">      &lt;span&gt;&#123;&#123; page &#125;&#125;/&#123;&#123; maxPage &#125;&#125;&lt;/span&gt;</div><div class="line">      &lt;router-link v-if="hasMore" :to="'/' + type + '/' + (page + 1)"&gt;more &amp;gt;&lt;/router-link&gt;</div><div class="line">      &lt;a v-else class="disabled"&gt;more &amp;gt;&lt;/a&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;transition :name="transition"&gt;</div><div class="line">      &lt;div class="news-list" :key="displayedPage" v-if="displayedPage &gt; 0"&gt;</div><div class="line">        &lt;transition-group tag="ul" name="item"&gt;</div><div class="line">          &lt;item v-for="item in displayedItems" :key="item.id" :item="item"&gt;</div><div class="line">          &lt;/item&gt;</div><div class="line">        &lt;/transition-group&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;/transition&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">···</div></pre></td></tr></table></figure>
<p>这样创建完HTML Body部分，前面提到的Vue渲染器会自动把这部分内容插入index.template.html中，替换对应的<code>&lt;!--vue-ssr-outlet--&gt;</code>,然后就又回到前面的流程了，server.js将整个html写入http响应体，浏览器就得到了整个html页面，整个首次访问过程完成。</p>
<blockquote>
<p>Tips:<br>后续更新内容规划：<br>0.开发模式下的热重载和热替换功能解读<br>1.生产模式下的服务端渲染逻辑流程<br>2.客户端渲染逻辑流程<br>3.客户端vue逻辑展示细节解读<br>4.更多</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文将对Vue的官方开源项目&lt;code&gt;vue-hackernews-2.0&lt;/code&gt;进行一次全面解读，包括项目中涉及到的前端技术栈。&lt;/p&gt;
&lt;p&gt;vue-hackernews项目，实际涉及知识点及技术栈非常全面，对于初学者来说，直接阅读该项目，极具挑战。这也是我写这个项目解读的初衷。&lt;/p&gt;
&lt;h2 id=&quot;起步&quot;&gt;&lt;a href=&quot;#起步&quot; class=&quot;headerlink&quot; title=&quot;起步&quot;&gt;&lt;/a&gt;起步&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/vuejs/vue-hackernews-2.0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HackerNews&lt;/a&gt;是基于 HN 的官方 firebase API 、Vue 2.0 、vue-router 和 vuex 来构建的，使用服务器端渲染。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://wangfuda.github.io/tags/vue/"/>
    
      <category term="Vuex" scheme="http://wangfuda.github.io/tags/Vuex/"/>
    
      <category term="vue-router" scheme="http://wangfuda.github.io/tags/vue-router/"/>
    
      <category term="ssr" scheme="http://wangfuda.github.io/tags/ssr/"/>
    
      <category term="webpack" scheme="http://wangfuda.github.io/tags/webpack/"/>
    
      <category term="node" scheme="http://wangfuda.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>vue-hackernews-2.0 细节解读</title>
    <link href="http://wangfuda.github.io/2017/05/13/vue-hackernews-2.0-code-detail/"/>
    <id>http://wangfuda.github.io/2017/05/13/vue-hackernews-2.0-code-detail/</id>
    <published>2017-05-12T16:00:00.000Z</published>
    <updated>2017-05-13T12:47:02.229Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文按源码文件分解解读了vue-hackernews-2.0开源项目中的一些知识点，作为对<a href="https://wangfuda.github.io/2017/05/14/vue-hackernews-2.0-code-explain/">项目源码解读</a>的细节补充。</p>
<h2 id="package-json解读"><a href="#package-json解读" class="headerlink" title="package.json解读"></a>package.json解读</h2><p>该文件提供了四种命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># install dependencies</span></div><div class="line">npm install <span class="comment"># or yarn</span></div><div class="line"></div><div class="line"><span class="comment"># serve in dev mode, with hot reload at localhost:8080</span></div><div class="line">npm run dev</div><div class="line"></div><div class="line"><span class="comment"># build for production</span></div><div class="line">npm run build</div><div class="line"></div><div class="line"><span class="comment"># serve in production mode</span></div><div class="line">npm start</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>执行<code>npm install</code><br>查找package.json中的dependencies和devDependencies字段，然后依次安装里面的模块。</p>
<blockquote>
<p>Tips:dependencies与devDependencies的区别<br>devDependencies下的模块，是开发环境需要的依赖项，主要是webpack打包，js语言转码(ES6代码转为ES5代码)等模块，这些模块不会被部署到生产环境。<br>dependencies下的模块，是生产环境需要的依赖项，即运行该包时所需要的依赖项。<br>这里可能有疑问，难道生产环境不需要webpack，js语言转码等模块吗？<br>答案是：需要，但这些模块不需要部署到生产环境，仅仅在生成生产环境所需的部署文件时被使用。</p>
</blockquote>
<p>执行<code>npm run dev</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="string">"scripts"</span>: &#123;</div><div class="line"><span class="string">"dev"</span>: <span class="string">"node server"</span>,</div><div class="line"><span class="string">"start"</span>: <span class="string">"cross-env NODE_ENV=production node server"</span>,</div><div class="line"><span class="string">"build"</span>: <span class="string">"rimraf dist &amp;&amp; npm run build:client &amp;&amp; npm run build:server"</span>,</div><div class="line"><span class="string">"build:client"</span>: <span class="string">"cross-env NODE_ENV=production webpack --config build/webpack.client.config.js --progress --hide-modules"</span>,</div><div class="line"><span class="string">"build:server"</span>: <span class="string">"cross-env NODE_ENV=production webpack --config build/webpack.server.config.js --progress --hide-modules"</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p>查找package.json中的scripts字段对应的对象，找到dev属性，并执行dev属性对应的脚本：<code>node server</code>即<code>node server.js</code>，即执行server.js</p>
<p>执行<code>npm run build</code><br>同样，找到build属性，并执行：<code>rimraf dist &amp;&amp; npm run build:client &amp;&amp; npm run build:server</code>，即删除dist目录并执行<code>npm run build:client</code>和<code>npm run build:server</code><br>对应功能是：设置环境变量为production，同时webpack根据config.js配置打包生产环境所需的部署文件</p>
<p>执行<code>npm start</code><br>同样，找到start属性，并执行：<code>cross-env NODE_ENV=production node server</code>，即通过cross-env模块设置NODE_ENV环境变量为production，并执行<code>node server</code></p>
<blockquote>
<p>Tips:为什么是<code>npm start</code>而不是<code>npm run start</code>?<br>1.两者都可以，因为start为npm内置支持的命令，所以可以直接执行，参见<code>npm --help</code><br>2.其他三个命令都不是内置命令，需要经由<code>npm run</code>去执行。</p>
</blockquote>
<h2 id="index-template-html解读"><a href="#index-template-html解读" class="headerlink" title="index.template.html解读"></a>index.template.html解读</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, minimal-ui"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">sizes</span>=<span class="string">"48x48"</span> <span class="attr">href</span>=<span class="string">"/public/logo-48.png"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"theme-color"</span> <span class="attr">content</span>=<span class="string">"#f60"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"manifest"</span> <span class="attr">href</span>=<span class="string">"/manifest.json"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这段html代码功能：移动端浏览器适配及PWA适配</p>
<blockquote>
<p>Tips:<a href="https://developer.mozilla.org/en-US/Apps/Progressive" target="_blank" rel="external">PWA (progressive web apps)</a>-本质上仍然是个网站，但允许直接被放置到移动设备的桌面上（例如通过chrome浏览器的Add to HomeScreen），而不需要用户去app store下载安装应用才能使用，而这与一个网址的快捷方式完全不同，因为这种web app提供了一种接近原生app的用户体验。</p>
</blockquote>
<p>接下来我们在手机(Nexus 6P/Android 7.1)上分别示范下浏览器体验及PWA体验分别是怎样的。<br>浏览器体验：<br>在Chrome浏览器地址栏中输入项目地址，效果如下：</p>
<p><img src="/assets/postImg/open_by_chrome.png" alt="open_by_chrome"></p>
<p>PWA体验：<br>通过Chrome的<a href="https://developer.chrome.com/multidevice/android/installtohomescreen" target="_blank" rel="external">Add to Homescreen</a>功能，将该站点添加到桌面。效果如下：</p>
<p><img src="/assets/postImg/chrome_menu.png" alt="chrome_menu">  <img src="/assets/postImg/chrome_menu_add_to_homescrren.png" alt="chrome_menu_add_to_homescrren">  <img src="/assets/postImg/chrome_add_to_homescrren_pwa.png" alt="chrome_add_to_homescrren_pwa">  </p>
<p>点击桌面生成的应用图标后，可以看到具备了过渡启动图界面，而且进入后，不再是浏览器内看网站的体验，地址栏消失了，看起来像是一个原生应用。</p>
<p><img src="/assets/postImg/pwa_flash_white.png" alt="pwa_flash_white">  <img src="/assets/postImg/pwa_homepage.png" alt="pwa_homepage"></p>
<p>现在我们对manifest.json配置做一下改动，来学习几个参数的作用。以下三张电机图标后的启动图界面变更分别对应manifest.json的如下三种配置改动：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1. 主题色：绿色 启动图背景色：白色</span></div><div class="line"><span class="string">"background_color"</span>: <span class="string">"#f2f3f5"</span>,</div><div class="line"><span class="string">"display"</span>: <span class="string">"standalone"</span>,</div><div class="line"><span class="string">"theme_color"</span>: <span class="string">"#48BB74"</span></div><div class="line"><span class="comment">//2. 主题色：绿色 启动图背景色：绿色</span></div><div class="line"><span class="string">"background_color"</span>: <span class="string">"#48BB74"</span>,</div><div class="line"><span class="string">"display"</span>: <span class="string">"standalone"</span>,</div><div class="line"><span class="string">"theme_color"</span>: <span class="string">"#48BB74"</span></div><div class="line"><span class="comment">//3. 主题色：橙色 启动图背景色：橙色</span></div><div class="line"><span class="string">"background_color"</span>: <span class="string">"#f60"</span>,</div><div class="line"><span class="string">"display"</span>: <span class="string">"standalone"</span>,</div><div class="line"><span class="string">"theme_color"</span>: <span class="string">"#f60"</span></div></pre></td></tr></table></figure></p>
<p><img src="/assets/postImg/pwa_flash.png" alt="pwa_flash">  <img src="/assets/postImg/pwa_flash_green.png" alt="pwa_flash_green">  <img src="/assets/postImg/pwa_flash_orange.png" alt="pwa_flash_orange"></p>
<blockquote>
<p>Tips:<br>这里用到的<a href="https://developer.mozilla.org/en-US/docs/Web/Manifest" target="_blank" rel="external">manifest.json</a>不要与作为离线缓存的<a href="http://www.w3school.com.cn/html5/html_5_app_cache.asp" target="_blank" rel="external">manifest</a>混淆。</p>
</blockquote>
<p>最后来对比感受下<code>非PWA的百度站点</code>Vs<code>PWA站点的hackernews</code>在Add to HomeScreen后，体验上的差异。</p>
<p><img src="/assets/postImg/pwa.gif" alt="pwa.gif"></p>
<p>概括下主要的差异：<br>1.增加了同原生应用一样的启动图过渡界面<br>2.进入站点后，像是原生应用一样，没有了地址栏等浏览器体验的痕迹。<br>3.从点击图标开始到浏览页面，整体的体验上，PWA更接近原生应用。<br>注：PWA更多的特性这里并未应用，其实PWA可以做的更多。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文按源码文件分解解读了vue-hackernews-2.0开源项目中的一些知识点，作为对&lt;a href=&quot;https://wangfuda.github.io/2017/05/14/vue-hackernews-2.0-code-explain/&quot;&gt;项目源码解读&lt;/a&gt;的细节补充。&lt;/p&gt;
&lt;h2 id=&quot;package-json解读&quot;&gt;&lt;a href=&quot;#package-json解读&quot; class=&quot;headerlink&quot; title=&quot;package.json解读&quot;&gt;&lt;/a&gt;package.json解读&lt;/h2&gt;&lt;p&gt;该文件提供了四种命令&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# install dependencies&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm install &lt;span class=&quot;comment&quot;&gt;# or yarn&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# serve in dev mode, with hot reload at localhost:8080&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm run dev&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# build for production&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm run build&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# serve in production mode&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm start&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://wangfuda.github.io/tags/vue/"/>
    
      <category term="Vuex" scheme="http://wangfuda.github.io/tags/Vuex/"/>
    
      <category term="vue-router" scheme="http://wangfuda.github.io/tags/vue-router/"/>
    
      <category term="ssr" scheme="http://wangfuda.github.io/tags/ssr/"/>
    
      <category term="webpack" scheme="http://wangfuda.github.io/tags/webpack/"/>
    
      <category term="node" scheme="http://wangfuda.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>hello world ii</title>
    <link href="http://wangfuda.github.io/2014/02/12/hello-world5/"/>
    <id>http://wangfuda.github.io/2014/02/12/hello-world5/</id>
    <published>2014-02-12T00:55:00.000Z</published>
    <updated>2017-05-09T07:49:13.160Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/postImg/day_1.jpg" alt="avatar"><br>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/postImg/day_1.jpg&quot; alt=&quot;avatar&quot;&gt;&lt;br&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://wangfuda.github.io/tags/js/"/>
    
      <category term="html5" scheme="http://wangfuda.github.io/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>hello world i</title>
    <link href="http://wangfuda.github.io/2014/02/11/hello-world/"/>
    <id>http://wangfuda.github.io/2014/02/11/hello-world/</id>
    <published>2014-02-11T00:55:00.000Z</published>
    <updated>2017-05-09T07:50:07.280Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/postImg/day_0.jpg" alt="avatar"></p>
<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/postImg/day_0.jpg&quot; alt=&quot;avatar&quot;&gt;&lt;/p&gt;
&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://wangfuda.github.io/tags/js/"/>
    
      <category term="html5" scheme="http://wangfuda.github.io/tags/html5/"/>
    
  </entry>
  
</feed>
